[
{
	"uri": "//localhost:1313/vi/",
	"title": "One Observability Workshop",
	"tags": [],
	"description": "",
	"content": "One Observability Workshop Tổng quan Chào mừng bạn đến với One Observability Workshop. Workshop này cung cấp cho bạn trải nghiệm thực tế với một loạt các công cụ mà AWS cung cấp cho việc giám sát và quan sát.\nCho dù môi trường của bạn đặt tại trên on-prem hoặc trên AWS, hoặc ứng dụng của bạn là kiến trúc monolith hoặc microservice, các công cụ quan sát sẽ giúp bạn hiểu sâu hơn về hiệu suất ứng dụng của bạn.\nCác giải pháp tiết kiệm chi phí và cơ bản của AWS cung cấp các khả năng mạnh mẽ giúp bạn xác định các chướng ngại vật, vấn đề và khuyết điểm mà không cần phải lục tung qua các dữ liệu, số liệu và dữ liệu truy vết khác nhau một cách thủ công.\nBạn mong chờ nhận được gì trong workshop này Bạn sẽ học được gì? Bạn sẽ được học về các công cụ giám sát của AWS như Amazon CloudWatch, AWS X-Ray, Amazon Managed Service, Amazon Managed Grafana , và AWS Distro for OpenTelemetry (ADOT). Trong workshop này chúng ta sẽ deploy 1 ứng dụng microservice và hướng dẫn các bạn khám phá những thứ các bạn làm được với vô số công cụ giám sát. Cuối cùng, bạn sẽ có hiểU biết rõ ràng về logging, metrics, và traces như là các kĩ thuật sử dụng chúng trong nhiều trường hợp khác nhau.\nMất bao lâu để hoàn thành workshop? Bạn sẽ cần 3-4 tiếng để hoàn thành tất cả nếu bạn đi qua từng phần. Mọi phần đều được thiết kế riêng biệt với các phần khác nên bạn có thể chọn và học bất cứ phần nào bạn muốn.\nBạn cần trình độ ở mức nào? Đây là workshop ở mức trung cấp và mong người học sẽ có trải nghiệm với những công cụ AWS khác nhau. Trong khi bạn không cần phải là dân chuyên để làm workshop này, nó sẽ giúp bạn có những kiến thúc cơ bản về monitoring như logs, metrics, traces, alarms, dashboards\u0026hellip;\nBạn sẽ mất gì? Bạn sẽ mất chút chi phí để thực hiện workshop này. Hãy đảm bảo rằng dọn dẹp mọi tài nguyên sau làm xong cái bạn muốn làm để tránh mất chi phí không đáng. Bài workshop này được viết lại dựa trên One Observability Workshop với mong muốn người làm có thể hiểu rõ hơn và dễ tiếp cận hơn hơn.\nGiới thiệu Cloud 9 \u0026amp;\u0026amp; deploy ứng dụng AWS native Observability Use Cases Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/2-setup/2.1-cloud9/",
	"title": "Cài đặt môi trường Cloud9",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ sử dụng CloudShell để tạo Cloud9 instance cho việc triển khai ứng dụng PetAdpotions.\nĐiềU kiện tiên quyết Trong hướng dẫn này chúng ta sẽ sử dụng CloudShell, nếU bạn không muốn sử dụng CloudShell, bạn phải cài đặt và có sẵn AWS CLI trên máy của bạn và thực hiện các câu lệnh trong các bước sắp tới.\nProfile của bạn phải có quyền admin.\nSetup Trong AWS Management Console ở trên Services, chọn CloudShell. Sao chép và dán đoạn lệnh sau vào terminal: curl -O https://raw.githubusercontent.com/aws-samples/one-observability-demo/main/cloud9-cfn.yaml aws cloudformation create-stack --stack-name C9-Observability-Workshop --template-body file://cloud9-cfn.yaml --capabilities CAPABILITY_NAMED_IAM aws cloudformation wait stack-create-complete --stack-name C9-Observability-Workshop echo -e \u0026#34;Cloud9 Instance is Ready!!\\n\\n\u0026#34; Sau khoảng thời gian ngắn, terminal sẽ xuất hiện \u0026ldquo;Cloud9 Instance is Ready!!. Điều này có nghĩ là môi trường Cloud9 của bạn đã sẵn sàng "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệU AWS cung cấp monitoring, logging, alarming, dashboards thông qua Amazon CloudWatch và tracing thông qua AWS X-Ray. Khi triển khai cùng nhau, chúng cung cấp ba trụ cột (Metric, Logs \u0026amp; Traces) của một giải pháp quan sát.\nTrong sự kiện re:Invent 2020, AWS ra mắt Amazon Managed Service for Prometheus và Amazon Managed Grafana, hai dịch vụ quản lý mới dựa trên mã nguồn mở, cung cấp thêm các lựa chọn cho khách hàng.\nAWS cũng ra mắt AWS Distro for OpenTelemetry (ADOT) - một bản phân phối an toàn, sẵn sàng cho sản xuất, được hỗ trợ bởi dự án OpenTelemetry. Là một phần của Cloud Native Computing Foundation, OpenTelemetry cung cấp các API, thư viện và agent mã nguồn mở để thu thập dữ liệu truy vết và số liệu phân tán cho giám sát ứng dụng. Với AWS Distro for OpenTelemetry, bạn có thể cài đặt ứng dụng của mình chỉ một lần để gửi số liệu và dữ liệu truy vết tương quan đến nhiều giải pháp giám sát của AWS và Partner.\nCác sự lựa chọn trong AWS Observability Full stack Observability on AWS "
},
{
	"uri": "//localhost:1313/vi/3-native_observe/3.1-logs/3.1.1-loginsights/",
	"title": "Log Insights",
	"tags": [],
	"description": "",
	"content": "CloudWatch Logs Insights cho phép bạn tương tác tìm kiếm và phân tích dữ liệu log của mình trong Amazon CloudWatch Logs. Bạn có thể thực hiện các truy vấn để giúp bạn phản ứng nhanh chóng một cách hiệu quả hơn với các vấn đề trong lúc vận hành. Nếu một vấn đề xảy ra, bạn có thể sử dụng CloudWatch Logs Insights để xác định nguyên nhân tiềm ẩn cũng như các thay đổi đã thực hiện.\nCloudWatch Logs Insights có một ngôn ngữ truy vấn được tạo ra với một số lệnh đơn giản nhưng mạnh mẽ. CloudWatch Logs Insights cung cấp các truy vấn mẫu, mô tả lệnh, tự động hoàn thành truy vấn và khám phá log để giúp bạn bắt đầu. Các truy vấn mẫu đã được bao gồm cho một số loại logs dịch vụ AWS.\nCloudWatch Logs Insights tự động khám phá các vùng (fields) trong các log từ các dịch vụ AWS như Amazon Route 53, AWS Lambda, AWS CloudTrail và Amazon VPC, cũng như bất kỳ ứng dụng hoặc lod tùy chỉnh nào phát sinh sự kiện log dưới dạng JSON.\nBạn có thể sử dụng CloudWatch Logs Insights để tìm kiếm log đã được gửi đến CloudWatch Logs vào ngày 5 tháng 11 năm 2018 hoặc sau đó.\nBạn có thể lưu trữ các truy vấn bạn đã tạo. Điều này có thể giúp bạn chạy các truy vấn phức tạp khi cần thiết, mà không cần phải tạo lại chúng mỗi lần bạn muốn chạy chúng.\nChúng ta sẽ sử dụng dữ liệu nào?\nChúng ta sẽ sử dụng log được tạo ra bởi ứng dụng PetSite trong module này. Bạn có thể sử dụng log của riêng bạn, nhưng định dạng và logic truy vấn sẽ khác nhau.\nĐọc thêm về chủ đề này\r"
},
{
	"uri": "//localhost:1313/vi/3-native_observe/3.1-logs/",
	"title": "Logs",
	"tags": [],
	"description": "",
	"content": "CloudWatch Logs cho phép bạn tập hợp tất cả logs từ hệ thống, ứng dụng và dịch vụ AWS mà bạn sử dụng ở trong duy nhất 1 dịch vụ có thể mở rộng, cân tải tốt.\nBạn có thể dễ dàng quan sát, tìm kiếm một số lỗi nhất định hoặc partern, lọc chúng theo một số vùng nhất định và lưu trữ chúng một cách an toàn để phân tích chúng trong tương lai.\nCloudWatch Logs cho phép bạn nhìn thấy tất cả logs ở bất kì nguồn nào như một flow duy nhất và nhất quán sắp xếp theo thời gian, và bạn có thể truy vấn và sắp xếp chúng dựa trên kích thước, nhóm hay tự tạo một phép tính toán với những lệnh truy vấn mạnh mẽ và hiển thị dữ liệu log ở trong dashboard.\nĐọc thêm về CloudWatch Logs\r"
},
{
	"uri": "//localhost:1313/vi/3-native_observe/3.1-logs/3.1.1-loginsights/3.1.1.1-interface/",
	"title": "Navigating the Interface",
	"tags": [],
	"description": "",
	"content": "Trước khi chúng ta tiếp xúc với ngôn ngữ truy vấn, ta sẽ cần biết về giao diện Logs Insights console và các tính năng chúng ta có thể sử dụng, như khám phá trường (fields) tự động, truy vấn mẫu, truy vấn đã lưu và lịch sử truy vấn.\nKhám phá trường (fields) tự động CloudWatch có thể tự động khám phá các trường từ log của bạn.\nTrong Bảng điều khiển quản lý AWS, trên menu Services, nhấp vào CloudWatch.\nTrong menu điều hướng bên trái dưới Logs, nhấp vào Logs Insights.\nChọn log group có tên /ecs/PetListAdoptions từ Select log group(s).\nBạn sẽ thấy một truy vấn mẫu được tự động đặt trong vùng truy vấn.\nNhấp Run query\nỞ menu phía bên phải, nhấp Discovered fields\nBạn sẽ thấy một danh sách các trường được tìm thấy bởi CloudWatch một cách tự động: Trường (fields) bắt đầu với \u0026ldquo;@\u0026rdquo; Trường (fields) bắt đầu với \u0026ldquo;@\u0026rdquo; là các trường được CloudWatch tự động tạo ra. Trường @message chứa log raw(chưa được xử lí hay parse)\nViệc này cho phép bạn chọn lấy những trường bạn muốn sử dụng trong truy vấn với intellisense: Những trường được tự động tìm thấy bởi vì chúng ở dạng JSON.\nĐịnh dạng JSON Định dạng JSON là sự lựa chọn tuyệt vời cho dữ liệu log, CloudWatch hỗ trợ khả năng tự động tìm thấy các trường trong JSON. Do đó bạn có thể dễ dàng sử dụng chúng trong các truy vấn của bạn. Tham khảo thêm ở Fields in JSON logs.\nCác mẫu truy vấn Log Insights cung cấp các mẫu truy vấn giúp bạn dễ dàng bắt đầu với chúng.\nỞ menu phía bên phải, nhấp Queries. Bạn sẽ thấy một danh sách các mẫu truy vấn được sắp xếp theo thể loại như theo dịch vụ hay theo tần suất sử dụng.\nChọn một trong số chúng và nhấp Apply, truy vấn sẽ được khởi tạo và bạn có thể chạy chúng.\nLưu ý: nó có thể không trả về kết quả cho các log group bạn đã chọn vì nó cho rằng trả về định dạng dữ liệu cơ bản. Sao chép và dán truy vấn sau vô editor. fields @timestamp, pettype | filter ispresent(pettype) | stats count() by pettype Nhấp Run query để thấy nó trả về kết quả.\nNhấp Save ở dưới editor.\nNhập Sample1 cho Query name.\nChọn Save.\nỞ thanh menu điều hướng bên phải, chọn Queries. Bạn nên thấy một truy vấn tên là Sample1 ở phần Saved queries.\nLịch sử truy vấn Nhấp nút History ở dưới editor. Ở đây bạn có thể thấy lịch sự tất cả truy vấn đã thực hiện. Bạn sẽ thấy truy vấn được thực thi bởi người đăng nhập vô cho dù họ có lưu lại hay không.\n"
},
{
	"uri": "//localhost:1313/vi/2-setup/2.2-deploy/",
	"title": "Triển khai",
	"tags": [],
	"description": "",
	"content": "\rBài workshop này cực kì khuyến khích bạn sử dụng Cloud9 để cài đặt cũng như tương tác. Trong khi bạn đang sử dụng terminal của chính bạn, những bước ở đây đã được tối ưu hoá và hoạt động với Cloud9. Nếu bạn không sử dụng Cloud9, workshop này sẽ coi như bạn có phương pháp thay thế phù hợp.\nChỉnh sửa quyền IAM cho Cloud9 Ở AWS Management Console trên phần Services, kiếm và chọn Cloud9.\nClick Open trên observabilityworkshop. Chọn vào icon hình bánh răng trên góc phải để mở tab Preferences.\nChọn AWS SETTINGS ở thanh menu bên trái. Tắt cài đặt AWS managed temporary credentials Đóng tab Preferences. Điều hướng tới terminal ở dưới. (Nếu bạn không thấy terminal, chọn Window ở phía bên trên, chọn New Terminal) Xoá credentials tạm thời Chạy câu lệnh sau trong terminal: rm -vf ${HOME}/.aws/credentials Câu lệnh trên đơn giản để đảm bảo rằng không còn credentials tạm thời nào bằng cách xoá files chứa credentials đi\nCài đặt AWS CLI với AWS Region hiện tại là mặc định: Chạy câu lệnh sau trong terminal: export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r \u0026#39;.region\u0026#39;) echo \u0026#34;export ACCOUNT_ID=${ACCOUNT_ID}\u0026#34; | tee -a ~/.bash_profile echo \u0026#34;export AWS_REGION=${AWS_REGION}\u0026#34; | tee -a ~/.bash_profile aws configure set default.region ${AWS_REGION} aws configure get default.region Đoạn lệnh trên cài đặt AWS CLI sử dụng AWS Region hiện tại là mặc định\nKiểm tra cài đặt môi trường Cloud9 Chạy câu lệnh sau trong terminal: test -n \u0026#34;$AWS_REGION\u0026#34; \u0026amp;\u0026amp; echo AWS_REGION is \u0026#34;$AWS_REGION\u0026#34; || echo AWS_REGION is not set aws sts get-caller-identity --query Arn | grep observabilityworkshop-admin -q \u0026amp;\u0026amp; echo \u0026#34;You\u0026#39;re good. IAM role IS valid.\u0026#34; || echo \u0026#34;IAM role NOT valid. DO NOT PROCEED.\u0026#34; Đoạn lệnh trên kiểm tra xem cài đặt môi trường của bạn có chính xác không.\nKhi sử dụng Cloud9, hãy chắc chắn rằng IAM role hợp lệ. Nếu không hãy qua lại và xác minh lại các bước trong trang này.\nCài đặt CDK Nếu repo chưa được clone, clone repo sử dụng câu lệnh: git clone https://github.com/aws-samples/one-observability-demo Sau khi clone thành công, chạy câu lệnh sau trong terminal:\ncd one-observability-demo/PetAdoptions/cdk/pet_stack npm install Đoạn lệnh trên di chuyển tới folder pet_stack và cài đặt các npm packages.\nBootstrap CDK Chạy câu lệnh sau để cài đặt Bootstrap CDK (hãy chắc chắn rằng bạn đang ở folder pet_stack): cdk bootstrap Trao quyền truy cập tới EKS Console (optional) Chạy câu lệnh sau (optional): Lưu ý: hãy thay \u0026lt;Enter your Role ARN\u0026gt; với ARN của AWS Identity của bạn. EKS Console mới gần đây ra mắt trong AWS. Để toàn quyền truy cập tới Console mới, một số quyền cần được trao ở trong EKS Cluster RBAC như miêu tả ở đây. Câu lệnh dưới đây trao quyền truy cập tới EKS Console.\nWorkshop này khuyến khích bạn để vào Role ARN bạn dùng để truy cập AWS Console cũng như có truy cập tới Amazon EKS service. CONSOLE_ROLE_ARN=\u0026lt;Enter your Role ARN\u0026gt; Triển khai ứng dụng Chạy các câu lệnh sau trên terminal để triển khai ứng dụng PetAdoptions trên tài khoản của bạn (hãy chắc chắn rằng bạn đang ở folder pet_stack): EKS_ADMIN_ARN=$(../../getrole.sh) echo -e \u0026#34;\\nRole \\\u0026#34;${EKS_ADMIN_ARN}\\\u0026#34; will be part of system\\:masters group\\n\u0026#34; if [ -z $CONSOLE_ROLE_ARN ]; then echo -e \u0026#34;\\nEKS Console access will be restricted\\n\u0026#34;; else echo -e \u0026#34;\\nRole \\\u0026#34;${CONSOLE_ROLE_ARN}\\\u0026#34; will have access to EKS Console\\n\u0026#34;; fi cdk deploy --context admin_role=$EKS_ADMIN_ARN Services --context dashboard_role_arn=$CONSOLE_ROLE_ARN --require-approval never cdk deploy Applications --require-approval never Nó sẽ mất vài phút để ứng dụng được triển khai hoàn toàn.\nCập nhật kubeconfig Chạy câu lệnh sau trong temrinal để cập nhật kubeconfig giúp bạn tương tác với EKS cluster: aws eks update-kubeconfig --name PetSite --region $AWS_REGION kubectl get nodes Sau khi chạy, nó nên hiện ra như thế này Tổng kết Đây là tất cả lệnh bạn chạy trong phần này, để nhanh gọn, bạn có thể sao chép hết lệnh dưới đây và chạy trong terminal:\nrm -vf ${HOME}/.aws/credentials export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r \u0026#39;.region\u0026#39;) echo \u0026#34;export ACCOUNT_ID=${ACCOUNT_ID}\u0026#34; | tee -a ~/.bash_profile echo \u0026#34;export AWS_REGION=${AWS_REGION}\u0026#34; | tee -a ~/.bash_profile aws configure set default.region ${AWS_REGION} aws configure get default.region test -n \u0026#34;$AWS_REGION\u0026#34; \u0026amp;\u0026amp; echo AWS_REGION is \u0026#34;$AWS_REGION\u0026#34; || echo AWS_REGION is not set aws sts get-caller-identity --query Arn | grep observabilityworkshop-admin -q \u0026amp;\u0026amp; echo \u0026#34;You\u0026#39;re good. IAM role IS valid.\u0026#34; || echo \u0026#34;IAM role NOT valid. DO NOT PROCEED.\u0026#34; git clone https://github.com/aws-samples/one-observability-demo cd one-observability-demo/PetAdoptions/cdk/pet_stack npm install # CONSOLE_ROLE_ARN=\u0026lt;Enter your Role ARN\u0026gt; EKS_ADMIN_ARN=$(../../getrole.sh) echo -e \u0026#34;\\nRole \\\u0026#34;${EKS_ADMIN_ARN}\\\u0026#34; will be part of system\\:masters group\\n\u0026#34; if [ -z $CONSOLE_ROLE_ARN ]; then echo -e \u0026#34;\\nEKS Console access will be restricted\\n\u0026#34;; else echo -e \u0026#34;\\nRole \\\u0026#34;${CONSOLE_ROLE_ARN}\\\u0026#34; will have access to EKS Console\\n\u0026#34;; fi cdk deploy --context admin_role=$EKS_ADMIN_ARN Services --context dashboard_role_arn=$CONSOLE_ROLE_ARN --require-approval never cdk deploy Applications --require-approval never aws eks update-kubeconfig --name PetSite --region $AWS_REGION kubectl get nodes "
},
{
	"uri": "//localhost:1313/vi/3-native_observe/3.1-logs/3.1.1-loginsights/3.1.1.2-querying_getting_started/",
	"title": "Bắt đầu với truy vấn",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ bắt đầu với các truy vấn đơn giản:\nTruy vấn mặc định Tìm kiếm tin nhắn chứa text (sử dụng filter) Đếm sự kiện (sử dụng stats) và xem kết quả dưới biểu đồ thời gian. Ta sẽ chạy truy vấn cho mỗi thể loại, giải thích xem nó làm gì, và xem kết quả ra sao. Truy vấn mặc định Trên Bảng điều khiển quản lý AWS, trong menu Services, nhấp vào CloudWatch.\nTrong menu điều hướng bên trái dưới Logs, nhấp vào Logs Insights.\nTừ Select log group(s), chọn /ecs/PetListAdoptions.\nBạn sẽ thấy một truy vấn mẫu được tự động đặt trong trường truy vấn.\nTruy vấn này sẽ:\nHiển thị dấu thời gian và tin nhắn bằng cách sử dụng lệnh fields,\nSắp xếp theo thời gian dấu thời gian theo thứ tự giảm dần (desc), và sau đó\nGiới hạn hiển thị chỉ với 20 kết quả cuối cùng.\nĐiều này luôn là một điểm khởi đầu tốt để xem các sự kiện log trông như thế nào trong log group của bạn.\nCác trường bắt đầu bằng @\nCác trường bắt đầu bằng \u0026ldquo;@\u0026rdquo; là các trường mà CloudWatch tự động tạo ra.\nTrường @message chứa raw log chưa được phân tích.\nNhấp vào nút Run query và xem kết quả. Ở đầu bạn có thể thấy một biểu đồ cột hiển thị phân phối các sự kiện log theo thời gian mà chúng khớp với truy vấn của bạn.\nDưới đây, bạn có thể thấy các sự kiện khớp với truy vấn của bạn. Bạn có thể nhấp vào mũi tên bên trái của mỗi dòng để mở rộng sự kiện. Trong trường hợp này, vì sự kiện là dạng JSON, chúng ta thấy nó hiển thị dưới dạng một danh sách các tên trường, với giá trị tương ứng bên cạnh. Ví dụ, trong sự kiện được mở rộng, tôi thấy tôi có một trường có tên là petcolor, và nó có giá trị là white.\nTìm các tin nhắn chứa văn bản Chúng ta có thể sử dụng lệnh filter để chỉ định các sự kiện log chúng ta muốn sử dụng.\nLệnh filter có thể được sử dụng để lấy một trường khớp với mong muốn, sự kiện chứa văn bản được chỉ định, thêm điều kiện cho các trường dạng số (numeric fields), kiểm tra xem một trường có tồn tại không và nhiều hơn nữa.\nVề cú pháp truy vấn Đối với thông tin chi tiết hơn, hãy xem tài liệu AWS về CloudWatch Logs Insights query syntax.\nXóa truy vấn đã có trong trình soạn truy vấn và sao chép và dán vào truy vấn sau đây: fields @timestamp, @message | filter @message like /brown/ | sort @timestamp desc | limit 20 Truy vấn này áp dụng một filter trên các tin nhắn và chỉ lấy các bản ghi chứa chuỗi brown trong log (trong trường @message).\nNó cũng sắp xếp các sự kiện được tìm thấy theo thứ tự thời gian giảm dần và chỉ trả về 20 sự kiện này.\nNhấp vào nút Run query. Đếm sự kiện (events) và xem kết quả dưới biểu đồ thời gian (time chart). Chúng ta có thể sử dụng lệnh stats để tổng hợp dữ liệu.\nLệnh stats có thể được sử dụng để đếm số lượng sự kiện, hoặc tính toán thống kê trên một trường cụ thể, như trung bình, tổng, max, min và nhiều hơn nữa.\nVề cú pháp truy vấn Đối với thông tin chi tiết hơn, hãy xem tài liệu AWS về CloudWatch Logs Insights query syntax.\nXóa truy vấn đã có trong trình soạn truy vấn và sao chép và dán vào truy vấn sau đây: fields @timestamp, @message | stats count(@message) as number_of_events by bin(5m) | limit 20 Truy vấn này trả về kết quả là số lượng tin nhắn được ghi lại trong các khoảng 5 phút.\nBạn cũng có thể hiển thị kết quả dưới dạng biểu đồ bằng cách nhấp vào tab Visualization trong khu vực kết quả như được hiển thị dưới đây. Chú ý rằng bạn cũng có thể thêm biểu đồ vào CloudWatch Dashboard, xuất ra csv và nhiều hơn nữa.\n"
},
{
	"uri": "//localhost:1313/vi/2-setup/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Phần này sẽ hướng dẫn bạn qua các bước để sử dụng Cloud9 triển khai ứng dụng.\nNội dung Cài đặt môi trường Cloud9 Triển khai ứng dụng Kiến trúc ứng dụng "
},
{
	"uri": "//localhost:1313/vi/3-native_observe/",
	"title": "AWS native Observability",
	"tags": [],
	"description": "",
	"content": "Quan sát toàn bộ stack tại AWS bao gồm các giải pháp cơ bản của AWS, giám sát hiệu suất ứng dụng (APM) và các giải pháp mã nguồn mở, mang lại cho bạn khả năng hiểu được những gì đang diễn ra trên toàn bộ công nghệ của bạn vào bất kỳ thời điểm nào. Giám sát tại AWS cho phép bạn thu thập, liên kết, tổng hợp và phân tích dữ liệu telemetry trong mạng lưới, cơ sở hạ tầng và ứng dụng của bạn trên môi trường đám mây, hybrid hoặc on-premises để bạn có thể thu thập thông tin về hành vi, hiệu suất và sức khỏe của hệ thống của bạn. Những thông tin này giúp bạn phát hiện, điều tra và khắc phục vấn đề một cách nhanh chóng; và kết hợp với trí tuệ nhân tạo và học máy, phản ứng, dự đoán và ngăn chặn vấn đề một cách tích cực.\nPhần này của workshop bao gồm các tính năng quan sát cơ bản của AWS dưới Amazon CloudWatch và AWS X-Ray.\nBạn sẽ có cơ hội tìm hiểu về các tính năng Quan sát của AWS như Amazon CloudWatch Dashboards , CloudWatch Container Insights , CloudWatch ServiceLens , CloudWatch Metrics , CloudWatch Alarms , CloudWatch Logs , AWS X-Ray và hơn thế nữa.\n"
},
{
	"uri": "//localhost:1313/vi/3-native_observe/3.1-logs/3.1.1-loginsights/3.1.1.3-displaying_results/",
	"title": "Hiển thị kết quả",
	"tags": [],
	"description": "",
	"content": "Chúng ta có một số lựa chọn về cách hiển thị kết quả truy vấn log của chúng ta.\nĐôi khi, việc hiển thị đầu ra dưới dạng bảng dữ liệu sẽ hữu ích, còn đôi khi sẽ hữu ích hơn nếu cung cấp hiển thị trực quan dưới dạng biểu đồ thời gian, biểu đồ hình tròn, biểu đồ cột, hoặc biểu đồ khu vực chồng lên.\nChúng ta sẽ sử dụng một truy vấn đơn giản để đi qua từng lựa chọn hiển thị này và thêm chúng vào một bảng điều khiển để tạo ra bảng điều khiển được hiển thị ở đây.\nChọn log group Trên Bảng điều khiển quản lý AWS, trong menu Services, nhấp vào CloudWatch.\nTrong menu điều hướng bên trái dưới Logs, nhấp vào Logs Insights.\nTừ Select log group(s), chọn /ecs/PetListAdoptions.\nTạo hiển thị dưới dạng bảng Sử dụng truy vấn sau và chọn Run query để xem kết quả. fields @timestamp, petcolor, pettype | filter ispresent(petcolor) AND ispresent(pettype) | stats count() by pettype Bạn sẽ thấy một bảng kết quả.\nChọn Add to dashboard Nếu bạn có sẵn một bảng điều khiển(dashboard), tiện ích (widget) có thể thêm vào bảng điều khiển hiện có. Ở đây, chúng ta sẽ tạo một bảng điều khiển mới.\nChọn Create new.\nĐặt tên cho bảng điều khiển mới là display-options và Create.\nBạn có thể sửa tiêu đề ở đây (dưới Customize widget title), hoặc sửa nó sau khi đã đặt trên bảng điều khiển. Tôi đã gọi tiện ích này là table display.\nChọn Add to dashboard.\nThay đổi kích thước tiện ích của bạn theo mong muốn và Save dashboard.\nBảng điều khiển của bạn sẽ trông giống như thế này.\nHiển thị dưới dạng biểu đồ hình tròn Chúng ta sẽ sử dụng lại truy vấn và thay đổi các tùy chọn hiển thị.\nTừ CloudWatch dashboard của bạn, nhấp vào 3 chấm dọc ở phía trên bên phải của tiện ích biểu đồ thời gian đã tạo trước đó và chọn Duplicate. (Bạn có thể sao chép bất kỳ tiện ích nào theo cách này). Trên tiện ích mới của bạn, nhấp vào 3 chấm dọc một lần nữa và chọn Edit. Bạn sẽ được chuyển về chế độ xem Insights Log để chỉnh sửa truy vấn của mình.\nChọn Run query.\nKhi bạn chỉnh sửa một tiện ích, tab Visualization sẽ trống rỗng. Bạn phải Run query trước để có kết quả để hiển thị.\nTruy vấn ở đây có kết quả ở định dạng có thể hiển thị theo nhiều cách.\nChọn tab Visualization và chọn Pie chart display.\nChọn Save changes.\nDi chuột qua tiêu đề và nhấp vào biểu tượng chỉnh sửa (cây bút). Thay đổi tiêu đề thành pie chart display.\nThay đổi kích thước, vị trí và đổi tên tiện ích của bạn theo mong muốn. Nhớ lưu lại bảng điều khiển (Save dashboard). Bảng điều khiển của bạn sẽ trông giống như thế này.\nHiển thị dưới dạng biểu đồ cột Sao chép(duplicate) một trong các tiện ích(widgets) của bạn như trước, sau đó chọn Edit và Run query.\nChọn tab Visualization và chọn Bar chart display.\nChọn Save changes.\nDi chuột qua tiêu đề và nhấp vào biểu tượng chỉnh sửa (cây bút). Thay đổi tiêu đề thành bar chart display.\nThay đổi kích thước, vị trí và đổi tên tiện ích của bạn theo mong muốn. Nhớ lưu lại bảng điều khiển (Save dashboard).\nBảng điều khiển của bạn sẽ trông giống như thế này.\nHiển thị dưới dạng biểu đồ thời gian Biểu đồ thời gian và biểu đồ stacked area yêu cầu dữ liệu đã được tổng hợp theo thời gian.\nTrong CloudWatch, chúng tôi gọi biểu đồ thời gian là một biểu đồ đường.\nVì sự đơn giản, chúng tôi chỉ sẽ xem xét thêm một loạt dữ liệu nhất định vào các biểu đồ này.\nSao chép(duplicate) một trong các tiện ích của bạn như trước, sau đó chọn Edit.\nChỉnh sửa lệnh stats trong truy vấn của bạn để bao gồm một tổng hợp thời gian như dưới đây và Run query.\nfields @timestamp, petcolor, pettype | filter ispresent(petcolor) AND ispresent(pettype) | stats count() by bin(5m) Chọn tab Visualization và chọn hiển thị Line chart display.\nChọn Save changes.\nDi chuột qua tiêu đề và nhấp vào biểu tượng chỉnh sửa (cây bút). Thay đổi tiêu đề thành time chart display.\nThay đổi kích thước, vị trí và đổi tên tiện ích của bạn theo mong muốn. Nhớ lưu lại bảng điều khiển (Save dashboard).\nBảng điều khiển của bạn sẽ trông giống như thế này.\nHiển thị dưới dạng stacked area Sao chép(duplicate) một trong các tiện ích của bạn như trước, sau đó chọn Edit và Run query. Nếu bạn nhìn thấy một lỗi chỉ ra rằng dữ liệu không phù hợp cho biểu đồ đường (line chart), bạn sẽ cần chỉnh sửa truy vấn để bao gồm một tổng hợp thời gian như đã làm cho hiển thị biểu đồ thời gian.\nChọn tab Visualization và chọn hiển thị Stacked area chart display.\nChọn Save changes.\nDi chuột qua tiêu đề và nhấp vào biểu tượng chỉnh sửa (cây bút). Thay đổi tiêu đề thành stacked area display.\nThay đổi kích thước, vị trí và đổi tên tiện ích của bạn theo mong muốn. Nhớ lưu lại bảng điều khiển (Save dashboard).\nBảng điều khiển của bạn sẽ trông giống như thế này.\nBiểu đồ thời gian với nhiều loạt dữ liệu Ví dụ trên được tạo ra dưới dạng biểu đồ đường trong phần của workshop về Truy vấn - sử dụng trường.\nNếu bạn muốn khám phá cách vẽ đồ thị nhiều loạt dữ liệu trên một biểu đồ thời gian, bạn có thể xem một ví dụ trong phần Truy vấn - sử dụng trường.\n"
},
{
	"uri": "//localhost:1313/vi/2-setup/2.3-apparchitecture/",
	"title": "Kiến trúc ứng dụng",
	"tags": [],
	"description": "",
	"content": "Biểu đồ sau minh họa các thành phần khác nhau của ứng dụng PetAdoptions. Đến thời điểm này, bạn nên đã triển khai ứng dụng PetAdoption trên tài khoản AWS bạn. Hãy nhớ xóa tất cả các tài nguyên bằng cách tuân theo hướng dẫn về dọn dẹp để tránh các chi phí sử dụng không cần thiết.\nNội dung của workshop này chủ yếu sử dụng kiến trúc sau đây: Khám phá ứng dụng (optional) Option 1: sử dụng Cloud9 (hoặc AWS CLI) Bạn cần hoàn thành các bước cài đặt Cloud9 trước đó, nếu không, hãy hướng tới Option 2.\nChạy câu lệnh sau:\naws ssm get-parameter --name \u0026#39;/petstore/petsiteurl\u0026#39; | jq -r .Parameter.Value Option 2: sử dụng CloudFormation console Ở phía trong CloudFormation console bạn cần làm:\nChọn Stacks ở thanh điều hướng bên trái. Kiếm stack tên là Services và click nó. Chọn tab Outputs, bạn sẽ thấy URL website xuất hiện ngay ở PetSiteUrl: Bước tiếp theo Mở link ở một trang web mới, bạn sẽ thấy ứng dụng như bức ảnh dưới đây: Troubleshooting Trong trường hợp hiếm có, có khả năng bạn sẽ gặp phải vấn đề website không hiện bất kì hình ảnh nào, chọn Perform Housekeeping ở ngay trên góc phải của website.\n"
},
{
	"uri": "//localhost:1313/vi/4-references/",
	"title": "References",
	"tags": [],
	"description": "",
	"content": "1. Amazon S3 https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteAccessPermissionsReqd.html https://repost.aws/knowledge-center/api-gateway-upload-image-s3 2. Lambda https://viblo.asia/p/serverless-series-golang-bai-1-serverless-va-aws-lambda-gAm5y71XZdb https://000078.awsstudygroup.com/1-introduce/ 3. Code https://www.appsloveworld.com/go/49/lambda-multipart-file-upload-in-go https://github.com/myshenin/aws-lambda-multipart-parser https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/s3/actions/bucket_basics.go https://github.com/aws/aws-lambda-go/blob/main/events/README_ApiGatewayEvent.md https://docs.aws.amazon.com/lambda/latest/dg/lambda-golang.html https://github.com/grokify/go-awslambda https://docs.aws.amazon.com/lambda/latest/dg/golang-package.html https://docs.aws.amazon.com/lambda/latest/dg/golang-handler.html "
},
{
	"uri": "//localhost:1313/vi/3-native_observe/3.1-logs/3.1.1-loginsights/3.1.1.4-querying_using_fields/",
	"title": "Truy vấn - sử dụng trường(fields)",
	"tags": [],
	"description": "",
	"content": "Như chúng ta đã đề cập, Logs Insights tự động trích xuất các trường từ các sự kiện có định dạng JSON (bạn có thể đọc thêm tại Fields in JSON logs). Tuy nhiên, có khả năng một số log của bạn sẽ không có định dạng JSON, hoặc việc tách các trường sẽ không có tác dụng với bạn. Dù sao bạn cũng sẽ muốn phân chia một trường thành các phần nhỏ hơn.\nTại sao việc phân chia dữ liệu log thành các trường khác nhau hữu ích? Việc phân chia dữ liệu của chúng ta thành các trường cho phép chúng ta lựa chọn những gì muốn hiển thị, cũng như tổng hợp hoặc áp dụng logic vào dữ liệu/các trường chúng ta quan tâm.\nTrong ví dụ này, chúng ta sẽ chạy một truy vấn để sử dụng các log từ ứng dụng petsite và tìm kiếm các sự kiện nhận nuôi (adoption events). Chúng ta muốn xem mẫu nhận nuôi của các loại thú cưng khác nhau qua thời gian.\nChúng ta sẽ xây dựng truy vấn từng bước một:\nBước 1: Lọc các sự kiện mà chúng ta quan tâm Bước 2: Tạo các trường - phân chia dữ liệu thành các trường hữu ích Bước 3: Phân tách trường mà chúng ta quan tâm một lần nữa Bước 4: Tích hợp dữ liệu và chọn cách hiển thị nó Sự kiện(events) sẽ trông như thế nào? Trước khi chúng ta bắt đầu phân tích cách phân chia dữ liệu, chúng ta cần xem xét định dạng của các sự kiện mà chúng ta quan tâm.\nTrong Bảng điều khiển quản lý AWS trên menu Dịch vụ, nhấp vào CloudWatch.\nTrong menu điều hướng bên trái dưới Logs, nhấp vào Logs Insights.\nTừ menu thả xuống Select log group(s), chọn nhóm log /ecs/PayForAdoption.\nĐể truy vấn mặc định và Run query. Bạn nên thấy các sự kiện tương tự như dưới đây.\nPOST /api/home/completeadoption?petId=024\u0026amp;petType=bunny HTTP/1.1 11.0.13.138:1876 200\nChúng ta có 5 trường, được phân tách bằng dấu cách. Chúng ta quan tâm đến trường thứ 2, vì nó chứa petType.\nBước 1: Lọc các sự kiện quan tâm Chúng ta sẽ bắt đầu bằng cách thu hẹp các sự kiện mà truy vấn sẽ trả về. Dây bước đầu tiên quan trọng trong truy vấn - nó đảm bảo chúng ta chỉ nhìn vào dữ liệu quan trọng trong kết quả.\nSửa truy vấn của bạn để phù hợp với những gì được hiển thị dưới đây. Ta sử dụng lệnh filter để giữ lại các sự kiện chứa chuỗi POST. filter @message like /POST/ | fields @timestamp, @message | sort @timestamp desc | limit 20 Càng cụ thể ở đây, việc xác định chính xác sẽ dễ dàng hơn để biết chúng ta đang sử dụng đÚng dữ liệu. Chúng ta có thể thêm vào bộ lọc để chỉ nhận các sự kiện completeadoption. Ví dụ:\nfilter @message like /POST/ and @message like /completeadoption/ | fields @timestamp, @message | sort @timestamp desc | limit 20 Chạy truy vấn và kiểm tra bạn chỉ nhìn thấy các sự kiện POST, completeadoption. Bước 2: Tạo các trường - phân chia dữ liệu thành các trường hữu ích Bây giờ chúng ta đã biết định dạng và chỉ nhìn vào các sự kiện chúng ta quan tâm, chúng ta sẽ phân chia dữ liệu của mình thành các trường bằng cách sử dụng lệnh parse.\nChúng ta làm điều này bằng cách sử dụng lệnh parse. Chúng ta có thể sử dụng lệnh parse với một mẫu đơn giản (được biết đến là biểu thức glob), hoặc sử dụng regex (cú pháp biểu thức chính quy). Đối với ví dụ này, một mẫu đơn giản sẽ đủ.\nChúng ta có các trường được phân tách bằng dấu cách, vì vậy chúng ta đặt một * (wildcard) vào, sau đó chỉ định tên chúng ta muốn cho mỗi trường. Chúng ta cũng đã phân tách ra địa chỉ IP và cổng trong trường thứ 4 bằng cách sử dụng dấu : (ip:port).\nHãy xem lệnh parse dưới đây.\nfilter @message like /POST/ and @message like /completeadoption/ | parse @message \u0026#34;* * * *:* *\u0026#34; as method, request, protocol, ip, port, status | limit 20 Cập nhật truy vấn của bạn để phù hợp với điều được hiển thị dưới đây, và Run query. Bây giờ bạn nên thấy các cột cho mỗi trường chúng ta đã chỉ định, và dữ liệu được hiển thị cho mỗi sự kiện. Đọc thêm về parse\nBạn có thể xem cú pháp truy vấn của Log Insights để biết thêm thông tin về lệnh parse, cũng như một số ví dụ về việc sử dụng cả biểu thức glob và regex.\nBước 3: Phân tích chi tiết trường sâu hơn Chúng ta đã tìm gần đến dữ liệu chúng ta muốn rồi, nhưng petType vẫn chỉ là một phần của trường request. Sẽ tốt hơn nếu chúng ta phân chia nó thành các phần nhỏ hơn và có một trường chỉ dành cho petType.\nChúng ta đã có thể thực hiện điều này trong lệnh parse ban đầu của mình, nhưng đôi khi có vài lý do để làm việc này riêng biệt.\nHãy xem lệnh parse mà chúng ta đã sử dụng ở Bước 2.\nparse @message \u0026#34;* * * *:* *\u0026#34; as method, request, protocol, ip, port, status Ở đây, chúng ta đã phân tách trường được gọi là @message xuống một cấp. Bạn có thể thấy rằng chúng ta đã chỉ định trường @message ngay sau lệnh parse. Chúng ta có thể chỉ định bất kỳ trường nào ở đây.\nTrong ví dụ này, chúng ta muốn phân tích cú pháp trường yêu cầu để trích xuất petType. Vì vậy, chúng ta chỉ định trường yêu cầu trực tiếp sau lệnh parse và bao gồm glob pattern và tên trường mới phù hợp.\nparse request \u0026#34;*?petId=*\u0026amp;petType=*\u0026#34; as requestURL, id, type Chúng ta vẫn đang sử dụng glob pattern, nhưng ở đây chúng ta đã cụ thể hóa hơn để các trường chứa chính xác dữ liệu chúng ta quan tâm. Bạn có thể thấy ba dấu * (wildcards) và 3 tên trường.\nCập nhật truy vấn của bạn để phù hợp với truy vấn đầy đủ được hiển thị dưới đây, và Run query. Bạn nên thấy các cột mới cho requestURL, id, và type. filter @message like /POST/ and @message like /completeadoption/ | parse @message \u0026#34;* * * *:* *\u0026#34; as method, request, protocol, ip, port, status | parse request \u0026#34;*?petId=*\u0026amp;petType=*\u0026#34; as requestURL, id, type | limit 20 Chỉ hiển thị một số trường\nNếu bạn cảm thấy kết quả của mình đang trở nên phức tạp, và bạn chỉ muốn xem một số trường, thì bạn có thể sử dụng lệnh display để chỉ định tên trường và thứ tự. Tất cả các trường khác sẽ bị ẩn đi:\nfilter @message like /POST/ and @message like /completeadoption/ | parse @message \u0026#34;* * * *:* *\u0026#34; as method, request, protocol, ip, port, status | parse request \u0026#34;*?petId=*\u0026amp;petType=*\u0026#34; as requestURL, id, type | display @timestamp, type | limit 20 Bước 4: Tổng hợp dữ liệu Chúng ta đã trích xuất dữ liệu của mình với mục đích xem xét pattern tự nuôi nhận nuôi (adoptions) của các loại vật nuôi(pet) khác nhau theo thời gian. Bây giờ chúng ta có trường loại vật nuôi (pet type), chúng ta đã sẵn sàng để tổng hợp.\nỞ đây, chúng ta sử dụng lệnh stats. Lệnh stats cho phép chúng ta tổng hợp dữ liệu của mình qua các nhóm khác nhau. Chúng ta sẽ xem qua một số ví dụ.\nMột tổng hợp đơn giản sẽ là đếm có bao nhiêu sự kiện cho mỗi loại vật nuôi, nói cách khác, đếm và nhóm theo loại. Sao chép truy vấn dưới đây và Run query. filter @message like /POST/ and @message like /completeadoption/ | parse @message \u0026#34;* * * *:* *\u0026#34; as method, request, protocol, ip, port, status | parse request \u0026#34;*?petId=*\u0026amp;petType=*\u0026#34; as requestURL, id, type | stats count() by type Chúng ta có thể nhóm theo nhiều trường, bao gồm một trường thời gian. Ví dụ, có bao nhiêu sự kiện cho mỗi loại vật nuôi trong mỗi khoảng thời gian 5 phút? Sao chép truy vấn dưới đây và Run query. filter @message like /POST/ and @message like /completeadoption/ | parse @message \u0026#34;* * * *:* *\u0026#34; as method, request, protocol, ip, port, status | parse request \u0026#34;*?petId=*\u0026amp;petType=*\u0026#34; as requestURL, id, type | stats count() by type, bin(5m) Kết quả cho một bảng dữ liệu được nhóm theo cả loại vật nuôi và các khung thời gian.\nĐể hiển thị biểu đồ thời gian với một đường cho mỗi loại vật nuôi, chúng ta cần sử dụng lệnh stats một cách khác. Sao chép truy vấn dưới đây và Run query. filter @message like /POST/ and @message like /completeadoption/ | parse @message \u0026#34;* * * *:* *\u0026#34; as method, request, protocol, ip, port, status | parse request \u0026#34;*?petId=*\u0026amp;petType=*\u0026#34; as requestURL, id, type | stats sum(type=\u0026#34;puppy\u0026#34;) as puppy, sum(type=\u0026#34;kitten\u0026#34;) as kitten, sum(type=\u0026#34;bunny\u0026#34;) as bunny by bin(5m) Kết quả có định dạng khác với truy vấn trước đó. Lần này chúng ta có một cột cho mỗi loại vật nuôi. Định dạng này sẽ cho phép chúng ta xem biểu đồ thời gian của dữ liệu trên mỗi loại vật nuôi.\nNhấp vào tab Visualization để xem biểu đồ thời gian của bạn. Đảm bảo rằng loại đường (Line) được chọn. Chúng ta đã làm gì? Trước khi chúng ta tiếp tục, hãy xem lại lệnh stats trong truy vấn mới của chúng ta.\n| stats sum(type=\u0026#34;puppy\u0026#34;) as puppy, sum(type=\u0026#34;kitten\u0026#34;) as kitten, sum(type=\u0026#34;bunny\u0026#34;) as bunny by bin(5m) Chúng ta đã sử dụng một lệnh stats với hàm sum. Trong hàm sum, chúng ta chỉ định cái gì để tổng hợp: tức là tất cả các sự kiện có giá trị loại là \u0026ldquo;puppy\u0026rdquo;. Chúng ta đã đặt tên cho kết quả tổng hợp, tức là puppy. Chúng ta đã làm điều này 3 lần, một lần cho mỗi loại vật nuôi. Chúng ta đã nhóm tổng hợp trên các khoảng thời gian 5 phút. Việc sử dụng hàm sum thay vì hàm count là việc quan trọng. Chúng ta phải sử dụng sum thay vì count ở đây, vì điều kiện type=\u0026ldquo;puppy\u0026rdquo; sẽ trả về 1 hoặc 0 cho mỗi sự kiện. Count sẽ đếm tất cả các số 1 và 0, về cơ bản đếm tất cả các sự kiện. Sum sẽ đếm những sự kiện có giá trị là 1 hoặc nơi type=\u0026ldquo;puppy\u0026rdquo; là true.\n"
},
{
	"uri": "//localhost:1313/vi/5-cleanup/",
	"title": "Dọn dẹp tài nguyên  ",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tiến hành các bước sau để xóa các tài nguyên chúng ta đã tạo trong bài thực hành này.\nXóa S3 bucket Truy cập giao diện quản trị dịch vụ S3 Click chọn S3 bucket chúng ta đã tạo cho bài thực hành. ( Ví dụ : bucket-for-lambda-55555 ) Click Empty. Điền permanently delete, sau đó click Empty để tiến hành xóa object trong bucket. Click Exit. Sau khi xóa hết object trong bucket, click Delete Điền tên S3 bucket, sau đó click Delete bucket để tiến hành xóa S3 bucket. Xóa API Gateway Truy cập vào giao diện quản trị dịch vụ API Gateway Chọn S3 Upload Chọn Delete Tại ô confirm , điền confirm. Click Delete để tiến hành xóa API Gateway. Xóa Lambda Function Truy cập vào giao diện quản trị dịch vụ Lambda Click s3-upload. Click chọn Actions. Click Delete. Tại ô confirm, điền delete để xác nhận, click Delete để thực hiện xóa Lambda function và các tài nguyên liên quan. "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]